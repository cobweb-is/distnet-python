import json
import random
import uuid
import os

# Parameters
C_NUM_ROOTS  = 1
C_NUM_LEVELS = 3
C_NUM_OF_WAYS = 2
C_NUM_OF_CCT_BRANCHES = 1 # expect no branches

class ElectricalNetworkGenerator:
    def __init__(self, C_NUM_ROOTS, C_NUM_LEVELS, C_NUM_OF_WAYS):
        self.C_NUM_ROOTS = C_NUM_ROOTS
        self.C_NUM_LEVELS = C_NUM_LEVELS
        self.C_NUM_OF_WAYS = C_NUM_OF_WAYS
        self.node_id = 1
        self.boards = []
        self.circuits = []

    def generate_board(self, level, root_node_position, parent_phase, parent_id=None, parent_circuit_id=None, is_q_cct_branch=None):
        # Generate board details
        
        str_board_reference = "ROOT,node: "+str(self.node_id) if level == 1 else f"Node {self.node_id } , L{level} P{root_node_position} B:{is_q_cct_branch}"
        str_board_phase = "Three-phase" if level <= 1 else random.choice(["Single-phase", "Three-phase"])
        board = {
            "board_reference": str_board_reference,
            "board_id": str(uuid.uuid4()),  # Generate a unique UUID for the board_id
            "board_reference_type": "DB",
            "board_phase": str_board_phase,
            "board_location_block": random.choice(["A", "B", "C"]),
            "board_location_floor": random.choice(["1", "2", "3"]),
            "board_location": random.choice(["Room1", "Room2", "Room3"]),
            "board_supply_source_reference": parent_id,
            "board_supply_source_reference_id": parent_circuit_id,
            "building_id": "165b0674-f8f7-4278-9b65-0fa7387ca9c4",
            "board_comments": "Generated by script"
        }
        self.boards.append(board)
        if level < self.C_NUM_LEVELS:
            # Generate circuits for the board, we assume one board for each way
            for cct_index in range(C_NUM_OF_WAYS):
                circuit = {
                    "circuit_id": str(uuid.uuid4()),  # Generate a unique UUID for the circuit_id
                    "board_id": board["board_id"],
                    "circuit_reference": cct_index + 1,
                    "circuit_phase": "P",
                    "circuit_equipment_connected": f"parent node {board["board_reference"]} cct {cct_index+1}, lev{level},pos{root_node_position}-{str_board_phase}:{is_q_cct_branch}",
                }
        
                # Recursively generate child boards one per way
                self.node_id += 1
                self.generate_board(level + 1, cct_index + 1, str_board_phase, board["board_id"], circuit["circuit_id"])
                if level ==1:
                     for branch_index in range(C_NUM_OF_CCT_BRANCHES):
                        self.node_id += 1
                        self.generate_board(level + 1, cct_index + 1, str_board_phase, board["board_id"], circuit["circuit_id"],"-B-")
                #circuit["board_id"] = board["board_id"]
                self.circuits.append(circuit)           

    def generate_network(self):
        for i in range(self.C_NUM_ROOTS):
            self.generate_board(1, i + 1, "Three-phase")

    def export_to_json(self, filename):
        data = {
            "building_id": "165b0674-f8f7-4278-9b65-0fa7387ca9c4",
            "tbl_board": self.boards,
            "tbl_circuit": self.circuits,
            "tbl_circuit_points_rcd": []
        }
        with open(filename, 'w') as outfile:
            json.dump(data, outfile, indent=4)

# Instantiate and generate the network
generator = ElectricalNetworkGenerator(C_NUM_ROOTS, C_NUM_LEVELS, C_NUM_OF_WAYS)
generator.generate_network()

# Export the data to a JSON file
# Specify the folder path
folder_path = r'C:\Users\micha\Dropbox\distnetwork\distnet-react\src'
# Ensure the directory exists, if not, create it
os.makedirs(folder_path, exist_ok=True)
# Write JSON to a file in the specified folder
file_path = os.path.join(folder_path, 'network_data.json')
generator.export_to_json(file_path)
